using GoAhead.Commands.BlockingShared;
using GoAhead.FPGA;
using GoAhead.Objects;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace GoAhead.Commands.GridStyle
{
    class PrintPartitionPinConstraint : CommandWithFileOutput
    {
        private const string PORT_KIND_BEGIN = "Begin";
        private const string PORT_KIND_END = "End";

        private const string EAST_OPTION_FOR_SWITCHBOX = "E";
        private const string WEST_OPTION_FOR_SWITCHBOX = "W";

        private const string DIRECTION_WEST = "West";
        private const string DIRECTION_EAST = "East";
        private const string DIRECTION_NORTH = "North";
        private const string DIRECTION_SOUTH = "South";


        protected override void DoCommandAction()
        {
            CheckParameters();

            OutputManager.WriteTCLOutput($"set_property HD.PARTPIN_LOCS {GetLocationAndPortName()} [get_pins {GetSignalName()}]; # generated by GoAhead");

            // prevent the specific port from blocking
            if(PreventBlocking)
            {
                ExcludePortsFromBlocking command = new ExcludePortsFromBlocking();
                command.PortName = GetPortName();
                command.Location = SwitchboxName;
                command.CheckForExistence = false;
                command.IncludeAllPorts = true;
                CommandExecuter.Instance.Execute(command);
            }
        }

        private string GetSignalName()
        {
            return $"{InstanceName}/{SignalName}[{SignalIndex.ToString()}]";
        }

        private string GetLocationAndPortName()
        {
            return $"{SwitchboxName}/{GetPortName()}";
        }

        private string GetPortName()
        {
            /*
             * we can define the portNameFormat in goa with the following conditions
             * use {0} for the first letter of the cardinal direction parameter
             * use {1} for the length parameter
             * use {2} for the 'W' or 'E', optional parameter to signify the left or right switchbox for certain architecture families
             * use {3} for the PortKind parameter
             * use {4} for the PortIndex
             * e.g "{0}{0}{1}{2}{3}{4}" would produce WW12_E_BEG0
             * e.g "{0}.{0}.{0}.{0}-{1}*{2}*{3}^{4} would produce W.W.W.W-12*W*BEG^0
             * e.g "{0}{0}{1}{3}{4} would produce WW12BEG0 (notice ommitted the 2nd parameter)
             * 
             * For ultrascale-like architecture, we have two different portNameSchemas - one for wires of length less
             * than maxWireLengthForPortNamesWithEastWestSwitchboxOption (if defined) and other for wires of more than this length.
             */

            string portNameSchema = VariableManager.Instance.GetValue("portNameSchema"); // Get value from .goa file
            string portNameSchemaWithOptionForEastWestSwitchbox = string.Empty;
            string maxWireLengthForPortNamesWithEastWestSwitchboxOption = string.Empty;

            string formattedPortName = string.Empty;

            if (FPGATypes.FpgaTypeSupportsEastWestSwitchboxes(FPGA.FPGA.Instance.Family))
            {
                try
                {
                    portNameSchemaWithOptionForEastWestSwitchbox = VariableManager.Instance.GetValue("portNameSchemaWithOptionForEastWestSwitchbox"); // Get value from .goa file
                }
                catch (Exception e)
                {
                    throw new Exception(String.Format("Could not retrieve the portNameSchemaWithOptionForEastWestSwitchbox variable for family {0}, which supports this option. Failed with exception: \n{1}", FPGA.FPGA.Instance.Family, e.Message));
                }

                try
                {
                    maxWireLengthForPortNamesWithEastWestSwitchboxOption = VariableManager.Instance.GetValue("maxWireLengthForPortNamesWithEastWestSwitchboxOption");
                }
                catch (Exception e)
                {
                    Console.WriteLine(String.Format("Warning: Could not retreive variable maxWireLengthForPortNamesWithEastWestSwitchboxOption due to exception \n{0} \nContinuing with no maxLength for portNameSchemas.", e.Message));
                }


                if (!string.IsNullOrEmpty(maxWireLengthForPortNamesWithEastWestSwitchboxOption) && Length >= Int32.Parse(maxWireLengthForPortNamesWithEastWestSwitchboxOption))
                {
                    formattedPortName = String.Format(portNameSchema, CardinalDirection[0].ToString(), Length, EastWestSwitchbox, PortKind.Substring(0, 3).ToUpper(), PortIndex);
                }
                else
                {
                    formattedPortName = String.Format(portNameSchemaWithOptionForEastWestSwitchbox, CardinalDirection[0].ToString(), Length, EastWestSwitchbox, PortKind.Substring(0, 3).ToUpper(), PortIndex);
                }
            }
            else
                formattedPortName = String.Format(portNameSchema, CardinalDirection[0].ToString(), Length, EastWestSwitchbox, PortKind.Substring(0, 3).ToUpper(), PortIndex);

            //// 7-Series port name has following structure: <WWT|EE|SS|NN><LENGTH><BEG|END><INDEX>
            //portName += CardinalDirection[0].ToString() + CardinalDirection[0].ToString();
            //portName += Length.ToString();
            //portName += PortKind.Substring(0, 3).ToUpper();
            //portName += PortIndex.ToString();

            // UltraScale/UltraScale+ port name has following structure: <WW|EE|SS|NN><LENGTH>_<W|E>_<BEG|END><INDEX>, <WW|EE|SS|NN>12_<BEG|END><INDEX>

            return formattedPortName;
        }

        private void CheckParameters()
        {
            bool portKindIsCorrect = PortKind.Equals(PORT_KIND_BEGIN) || PortKind.Equals(PORT_KIND_END);
            bool cardinalDirectionIsCorrect = CardinalDirection.Equals(DIRECTION_EAST) ||
                                              CardinalDirection.Equals(DIRECTION_WEST) ||
                                              CardinalDirection.Equals(DIRECTION_SOUTH) ||
                                              CardinalDirection.Equals(DIRECTION_NORTH);

            bool eastWestSwitchboxIsCorrect = EastWestSwitchbox.Equals(EAST_OPTION_FOR_SWITCHBOX) ||
                                              EastWestSwitchbox.Equals(WEST_OPTION_FOR_SWITCHBOX);

            bool signalIndexIsCorrect = SignalIndex >= 0;
            bool portIndexIsCorrect = PortIndex >= 0 && PortIndex <= 3;
            bool instanceNameIsCorrect = !string.IsNullOrEmpty(InstanceName);
            bool signalNameIsCorrect = !string.IsNullOrEmpty(SignalName);
            bool switchboxNameIsCorrect = !string.IsNullOrEmpty(SwitchboxName);

            if (!portKindIsCorrect || !cardinalDirectionIsCorrect || !signalIndexIsCorrect || !portIndexIsCorrect ||
                !instanceNameIsCorrect || !signalNameIsCorrect || !switchboxNameIsCorrect ||
                !eastWestSwitchboxIsCorrect)
            {
                throw new ArgumentException("Unexpected format in one of the parameters.");
            }

        }

        public override void Undo()
        {
            throw new NotImplementedException();
        }

        [Parameter(Comment = "Unblock the partition pin")]
        public bool PreventBlocking = true;

        [Parameter(Comment = "Either Begin or End")]
        public string PortKind = "Begin";

        [Parameter(Comment = "Cardinal direction: North, South, West, or East")]
        public string CardinalDirection = "West";

        [Parameter(Comment = "Index of the signal")]
        public int SignalIndex = 0;

        [Parameter(Comment = "Index of the port")]
        public int PortIndex = 0;

        [Parameter(Comment = "The length of the wire (in terms of number of switchboxes")]
        public int Length = 2;

        [Parameter(Comment = "The switchbox to use. Allowed options are 'E' or 'W'")]
        public string EastWestSwitchbox = WEST_OPTION_FOR_SWITCHBOX;

        [Parameter(Comment = "Instance name of the component")]
        public string InstanceName = "inst_ConnMacro";

        [Parameter(Comment = "The name of the signal")]
        public string SignalName = "p2s";

        [Parameter(Comment = "The name of the switchbox.")]
        public string SwitchboxName = "INT_R_X41Y9";

        //constant dictionary (move constants to a separate class?)
        

    }
}

using GoAhead.Commands.BlockingShared;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace GoAhead.Commands.GridStyle
{
    class PrintPartitionPinConstraint : CommandWithFileOutput
    {
        private const string PORT_KIND_BEGIN = "Begin";
        private const string PORT_KIND_END = "End";

        private const string DIRECTION_WEST = "West";
        private const string DIRECTION_EAST = "East";
        private const string DIRECTION_NORTH = "North";
        private const string DIRECTION_SOUTH = "South";

        protected override void DoCommandAction()
        {
            this.CheckParameters();

            this.OutputManager.WriteTCLOutput($"set_property HD.PARTPIN_LOCS {this.GetLocationAndPortName()} [get_pins {this.GetSignalName()}]; # generated by GoAhead");

            // prevent the specific port from blocking
            if(this.PreventBlocking)
            {
                ExcludePortsFromBlocking command = new ExcludePortsFromBlocking();
                command.PortName = this.GetPortName();
                command.Location = this.SwitchboxName;
                command.CheckForExistence = false;
                command.IncludeAllPorts = true;
                CommandExecuter.Instance.Execute(command);
            }
        }

        private string GetSignalName()
        {
            return $"{this.InstanceName}/{this.SignalName}[{this.SignalIndex.ToString()}]";
        }

        private string GetLocationAndPortName()
        {
            return $"{this.SwitchboxName}/{this.GetPortName()}";
        }

        private string GetPortName()
        {
            string portName = String.Empty;

            // port name has following structure: <WWT|EE|SS|NN><LENGTH><BEG|END><INDEX>
            portName += this.CardinalDirection[0].ToString() + this.CardinalDirection[0].ToString();
            portName += this.Length.ToString();
            portName += this.PortKind.Substring(0, 3).ToUpper();
            portName += this.PortIndex.ToString();

            return portName;
        }

        private void CheckParameters()
        {
            bool portKindIsCorrect = this.PortKind.Equals(PORT_KIND_BEGIN) || this.PortKind.Equals(PORT_KIND_END);
            bool cardinalDirectionIsCorrect = this.CardinalDirection.Equals(DIRECTION_EAST) ||
                                              this.CardinalDirection.Equals(DIRECTION_WEST) ||
                                              this.CardinalDirection.Equals(DIRECTION_SOUTH) ||
                                              this.CardinalDirection.Equals(DIRECTION_NORTH);

            bool signalIndexIsCorrect = this.SignalIndex >= 0;
            bool portIndexIsCorrect = this.PortIndex >= 0 && this.PortIndex <= 3;
            bool instanceNameIsCorrect = !String.IsNullOrEmpty(this.InstanceName);
            bool signalNameIsCorrect = !String.IsNullOrEmpty(this.SignalName);
            bool switchboxNameIsCorrect = ! String.IsNullOrEmpty(this.SwitchboxName);

            if (!portKindIsCorrect || !cardinalDirectionIsCorrect || !signalIndexIsCorrect || !portIndexIsCorrect ||
                !instanceNameIsCorrect || !signalNameIsCorrect || !switchboxNameIsCorrect)
            {
                throw new ArgumentException("Unexpected format in one of the parameters.");
            }

        }

        public override void Undo()
        {
            throw new NotImplementedException();
        }

        [Parameter(Comment = "Unblock the partition pin")]
        public bool PreventBlocking = true;

        [Parameter(Comment = "Either Begin or End")]
        public String PortKind = "Begin";

        [Parameter(Comment = "Cardinal direction: North, South, West, or East")]
        public String CardinalDirection = "West";

        [Parameter(Comment = "Index of the signal")]
        public int SignalIndex = 0;

        [Parameter(Comment = "Index of the port")]
        public int PortIndex = 0;

        [Parameter(Comment = "The length of the wire (in terms of number of switchboxes")]
        public int Length = 2;

        [Parameter(Comment = "Instance name of the component")]
        public String InstanceName = "inst_ConnMacro";

        [Parameter(Comment = "The name of the signal")]
        public String SignalName = "p2s";

        [Parameter(Comment = "The name of the switchbox.")]
        public String SwitchboxName = "INT_R_X41Y9";



    }
}
